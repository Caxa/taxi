from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging
import re

logger = logging.getLogger(__name__)

# –®–∞–≥–∏ ConversationHandler ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
CHOOSE_TYPE, CHOOSE_DIRECTION, ENTER_ADDRESS_FROM, CHOOSE_POINT_TO, ENTER_TIME, CONFIRM_BOOKING, EXTRA = range(7)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup([
    ["üöï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏"],
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üë®‚Äç‚úàÔ∏è –°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º"],
    ["‚ÑπÔ∏è –ü–æ–º–æ—â—å / –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
], resize_keyboard=True)

# –ü—É–Ω–∫—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ü–µ–Ω—ã
DESTINATIONS = {
    "–ú–µ—Ç—Ä–æ –ø—Ä–æ—Å–ø–µ–∫—Ç –ø–æ–±–µ–¥—ã": 1000,
    "–†–ö–ë": 1000,
    "–î–†–ö–ë": 1100,
    "–ñ–î –≤–æ–∫–∑–∞–ª 1": 1400,
    "–ñ–î –≤–æ–∫–∑–∞–ª 2": 1500,
    "–ê—ç—Ä–æ–ø–æ—Ä—Ç –ö–∞–∑–∞–Ω–∏": 1400,
    "–û–Ω–∫–æ—Ü–µ–Ω—Ç—Ä": 1300,
    "–ì–ª–∞–∑–Ω–æ–π —Ü–µ–Ω—Ç—Ä": 1400,
    "–ë—É—Ç–ª–µ—Ä–æ–≤–∞ 14 –∏ 41": 1400,
    "–ë–∞—É–º–∞–Ω–∞ —Ü–µ–Ω—Ç—Ä": 1400,
    "–ê–∫–≤–∞–ø–∞—Ä–∫ –†–∏–≤—å–µ—Ä–∞": 1500,
    "–†–µ—á–Ω–æ–π –ø–æ—Ä—Ç": 1400,
    "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª —Ü–µ–Ω—Ç—Ä": 1400,
    "—É–ª. –ß–∏—Å—Ç–æ–ø–æ–ª—å—Å–∫–∞—è": 1400,
    "–ú–ö–î–¶": 1200,
    "–ö–∞–∑–∞–Ω –ú–æ–ª–ª": 1400,
    "–ü–∞—Ä–∫ –•–∞—É—Å": 1500,
    "–¢–∞–Ω–¥–µ–º": 1500,
    "–ê–∫–≤–∞–ø–∞—Ä–∫ –ë—Ä–∏–æ–Ω–∏–∫—Å": 1500,
    "–Æ–∂–Ω—ã–π –≤–æ–∫–∑–∞–ª": 1100,
    "–í–æ—Å—Ç–æ—á–Ω—ã–π –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª": 1400,
    "–°–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∫–∑–∞–ª": 1500,
}

# –®–∞–≥ 1 ‚Äî –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–µ–∑–¥–∫–∏
async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected = update.message.text.strip()
    if selected not in ["üöó –ú–µ—Å—Ç–æ –≤ –º–∞—à–∏–Ω–µ", "üöò –í—Å—è –º–∞—à–∏–Ω–∞"]:
        await update.message.reply_text("üöï –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–µ–∑–¥–∫–∏:", reply_markup=ReplyKeyboardMarkup([
            ["üöó –ú–µ—Å—Ç–æ –≤ –º–∞—à–∏–Ω–µ", "üöò –í—Å—è –º–∞—à–∏–Ω–∞"]
        ], resize_keyboard=True))
        return CHOOSE_TYPE

    context.user_data['ride_type'] = selected
    await update.message.reply_text("üèô –û—Ç–∫—É–¥–∞ –≤—ã –µ–¥–µ—Ç–µ? –í–≤–µ–¥–∏—Ç–µ '–ö–∞–∑–∞–Ω—å' –∏–ª–∏ '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫'")
    return CHOOSE_DIRECTION

# –®–∞–≥ 2 ‚Äî –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def choose_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from_city = update.message.text.strip().capitalize()
    if from_city not in ["–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫"]:
        await update.message.reply_text("‚ùå –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –ö–∞–∑–∞–Ω—å—é –∏ –ù–∏–∂–Ω–µ–∫–∞–º—Å–∫–æ–º.")
        return CHOOSE_DIRECTION

    to_city = "–ö–∞–∑–∞–Ω—å" if from_city == "–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫" else "–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫"
    context.user_data['from_city'] = from_city
    context.user_data['to_city'] = to_city

    if from_city == "–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫":
        await update.message.reply_text("üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å –≤ –ù–∏–∂–Ω–µ–∫–∞–º—Å–∫–µ:")
    else:
        await update.message.reply_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ö–∞–∑–∞–Ω–∏:",
            reply_markup=ReplyKeyboardMarkup([list(DESTINATIONS.keys())[i:i+2] for i in range(0, len(DESTINATIONS), 2)], resize_keyboard=True)
        )
    return ENTER_ADDRESS_FROM

# –®–∞–≥ 3 ‚Äî –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def enter_address_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from_city = context.user_data['from_city']

    if from_city == "–ö–∞–∑–∞–Ω—å":
        selected_point = update.message.text.strip()
        if selected_point not in DESTINATIONS:
            await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return ENTER_ADDRESS_FROM
        context.user_data['from_address'] = selected_point
        context.user_data['price'] = DESTINATIONS[selected_point]

        await update.message.reply_text("üè† –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –ù–∏–∂–Ω–µ–∫–∞–º—Å–∫–µ:")
    else:
        context.user_data['from_address'] = update.message.text.strip()
        await update.message.reply_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –ö–∞–∑–∞–Ω–∏:",
            reply_markup=ReplyKeyboardMarkup([list(DESTINATIONS.keys())[i:i+2] for i in range(0, len(DESTINATIONS), 2)], resize_keyboard=True)
        )
        return CHOOSE_POINT_TO

    return CHOOSE_POINT_TO

# –®–∞–≥ 4 ‚Äî –≤—ã–±–æ—Ä —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
async def choose_point_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from_city = context.user_data['from_city']

    if from_city == "–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫":
        selected_point = update.message.text.strip()
        if selected_point not in DESTINATIONS:
            await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return CHOOSE_POINT_TO
        context.user_data['to_address'] = selected_point
        context.user_data['price'] = DESTINATIONS[selected_point]
    else:
        context.user_data['to_address'] = update.message.text.strip()

    await update.message.reply_text("üïí –ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–µ? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")
    return ENTER_TIME

# –®–∞–≥ 5 ‚Äî –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
async def enter_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time = update.message.text.strip()
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", time):
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:45)")
        return ENTER_TIME

    context.user_data['time'] = time

    await update.message.reply_text(
        f"üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"–¢–∏–ø: {context.user_data['ride_type']}\n"
        f"–ò–∑: {context.user_data['from_city']} ({context.user_data['from_address']})\n"
        f"–í: {context.user_data['to_city']} ({context.user_data['to_address']})\n"
        f"–í—Ä–µ–º—è: {context.user_data['time']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {context.user_data['price']} —Ä\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'"
    )
    return CONFIRM_BOOKING

# –®–∞–≥ 6 ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if text != "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return ConversationHandler.END

    conn = context.bot_data.get("conn")
    cursor = context.bot_data.get("cursor")

    if not conn or not cursor:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
        return ConversationHandler.END

    telegram_id = update.effective_user.id
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
    user_row = cursor.fetchone()

    if not user_row:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    user_id = user_row[0]

    try:
        cursor.execute("""
            INSERT INTO bookings (
                client_id,
                from_city,
                to_city,
                pickup_point,
                destination_point,
                ride_time,
                price,
                ride_type,
                status
            )
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, 'pending')
        """, (
            user_id,
            context.user_data['from_city'],
            context.user_data['to_city'],
            context.user_data['from_address'],   # –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ pickup_point
            context.user_data['to_address'],     # –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ destination_point
            context.user_data['time'],           # –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ ride_time
            context.user_data['price'],
            context.user_data['ride_type']
        ))
        conn.commit()

        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=main_menu
        )
        logger.info("–ë—Ä–æ–Ω—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", telegram_id)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –±—Ä–æ–Ω–∏: %s", str(e))
        conn.rollback()
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)

    return ConversationHandler.END

# (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
async def extra_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!")
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
def get_states_range():
    return CHOOSE_TYPE, CHOOSE_DIRECTION, ENTER_ADDRESS_FROM, CHOOSE_POINT_TO, ENTER_TIME, CONFIRM_BOOKING, EXTRA
