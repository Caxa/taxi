# booking.py

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging
import re

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_TYPE, CHOOSE_CITY, CHOOSE_POINT, ENTER_TIME, CONFIRM_BOOKING = range(1, 6)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ main.py)
main_menu = ReplyKeyboardMarkup([
    ["üöï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏"],
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üë®‚Äç‚úàÔ∏è –°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º"],
    ["‚ÑπÔ∏è –ü–æ–º–æ—â—å / –ö–æ–Ω—Ç–∞–∫—Ç—ã"]
], resize_keyboard=True)

# –ü–µ—Ä–µ–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ main.py
def get_states_range():
    return CHOOSE_TYPE, CHOOSE_CITY, CHOOSE_POINT, ENTER_TIME, CONFIRM_BOOKING

# –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–µ–∑–¥–∫–∏
async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected = update.message.text.strip()
    logger.info("–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–æ–µ–∑–¥–∫–∏: %s", selected)

    if selected not in ["üöó –ú–µ—Å—Ç–æ –≤ –º–∞—à–∏–Ω–µ", "üöò –í—Å—è –º–∞—à–∏–Ω–∞"]:
        await update.message.reply_text(
            "üöï –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ –µ—Ö–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup([
                ["üöó –ú–µ—Å—Ç–æ –≤ –º–∞—à–∏–Ω–µ", "üöò –í—Å—è –º–∞—à–∏–Ω–∞"]
            ], resize_keyboard=True)
        )
        return CHOOSE_TYPE

    context.user_data['ride_type'] = selected
    await update.message.reply_text("üèô –ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö–∞–∑–∞–Ω—å)")
    logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞.")
    return CHOOSE_CITY

# –®–∞–≥ 2: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
async def choose_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip().lower()
    logger.info("–í–≤–µ–¥—ë–Ω –≥–æ—Ä–æ–¥: %s", city)

    if city not in ["–∫–∞–∑–∞–Ω—å", "–Ω–∏–∂–Ω–µ–∫–∞–º—Å–∫"]:
        await update.message.reply_text("‚ùå –ú—ã –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ö–∞–∑–∞–Ω—å –∏ –ù–∏–∂–Ω–µ–∫–∞–º—Å–∫.")
        return CHOOSE_CITY

    context.user_data['city_to'] = city.capitalize()
    await update.message.reply_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup([
            ["üöâ –í–æ–∫–∑–∞–ª 1", "üöâ –í–æ–∫–∑–∞–ª 2"],
            ["‚úàÔ∏è –ê—ç—Ä–æ–ø–æ—Ä—Ç", "üìç –î—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ"]
        ], resize_keyboard=True)
    )
    return CHOOSE_POINT

# –®–∞–≥ 3: –í—ã–±–æ—Ä —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
async def choose_point(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()

    if user_input not in DESTINATIONS:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞ –Ω–µ –∫–Ω–æ–ø–∫–∞—Ö
        destinations_list = "\n".join(
            [f"{i+1}. {name} ‚Äî {price} —Ä" for i, (name, price) in enumerate(DESTINATIONS.items())]
        )
        await update.message.reply_text(
            f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–æ—á–∫–∞.\n\nüìç –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–æ—á–µ–∫:\n\n{destinations_list}"
        )
        return CHOOSE_POINT

    context.user_data['point'] = user_input
    context.user_data['price'] = DESTINATIONS[user_input]

    await update.message.reply_text("üïí –ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–µ? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)")
    return ENTER_TIME


# –®–∞–≥ 4: –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏

async def enter_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if not re.match(r"^(?:[01]\d|2[0-3]):[0-5]\d$", time):
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:45)")
        return ENTER_TIME

    context.user_data['time'] = time

    await update.message.reply_text(
        f"üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"–¢–∏–ø: {context.user_data['ride_type']}\n"
        f"–ì–æ—Ä–æ–¥: {context.user_data['city_to']}\n"
        f"–¢–æ—á–∫–∞: {context.user_data['point']}\n"
        f"–í—Ä–µ–º—è: {context.user_data['time']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {context.user_data['price']} —Ä\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'"
    )
    return CONFIRM_BOOKING

# –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, conn, cursor):
    text = update.message.text.strip().lower()

    if text != "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
        return ConversationHandler.END

    telegram_id = update.effective_user.id
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
    user_row = cursor.fetchone()

    if not user_row:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    user_id = user_row[0]

    try:
        cursor.execute("""
            INSERT INTO bookings (client_id, schedule_id, booked_seats, pickup_point, destination_point, status)
            VALUES (%s, NULL, 1, %s, %s, 'pending')
        """, (
            user_id,
            context.user_data.get('point'),
            context.user_data.get('city_to')
        ))
        conn.commit()

        await update.message.reply_text(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç –ø–æ–µ–∑–¥–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=main_menu
        )
        logger.info("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", telegram_id)

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –±—Ä–æ–Ω–∏: %s", str(e))
        conn.rollback()
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)

    return ConversationHandler.END

DESTINATIONS = {
    "–ú–µ—Ç—Ä–æ –ø—Ä–æ—Å–ø–µ–∫—Ç –ø–æ–±–µ–¥—ã": 1000,
    "–†–ö–ë": 1000,
    "–î–†–ö–ë": 1100,
    "–ñ–î –≤–æ–∫–∑–∞–ª 1": 1400,
    "–ñ–î –≤–æ–∫–∑–∞–ª 2": 1500,
    "–ê—ç—Ä–æ–ø–æ—Ä—Ç –ö–∞–∑–∞–Ω–∏": 1400,
    "–û–Ω–∫–æ—Ü–µ–Ω—Ç—Ä": 1300,
    "–ì–ª–∞–∑–Ω–æ–π —Ü–µ–Ω—Ç—Ä": 1400,
    "–ë—É—Ç–ª–µ—Ä–æ–≤–∞ 14 –∏ 41": 1400,
    "–ë–∞—É–º–∞–Ω–∞ —Ü–µ–Ω—Ç—Ä": 1400,
    "–ê–∫–≤–∞–ø–∞—Ä–∫ –†–∏–≤—å–µ—Ä–∞": 1500,
    "–†–µ—á–Ω–æ–π –ø–æ—Ä—Ç": 1400,
    "–ê–≤—Ç–æ–≤–æ–∫–∑–∞–ª —Ü–µ–Ω—Ç—Ä": 1400,
    "—É–ª. –ß–∏—Å—Ç–æ–ø–æ–ª—å—Å–∫–∞—è": 1400,
    "–ú–ö–î–¶": 1200,
    "–ö–∞–∑–∞–Ω –ú–æ–ª–ª": 1400,
    "–ü–∞—Ä–∫ –•–∞—É—Å": 1500,
    "–¢–∞–Ω–¥–µ–º": 1500,
    "–ê–∫–≤–∞–ø–∞—Ä–∫ –ë—Ä–∏–æ–Ω–∏–∫—Å": 1500,
    "–Æ–∂–Ω—ã–π –≤–æ–∫–∑–∞–ª": 1100,
    "–í–æ—Å—Ç–æ—á–Ω—ã–π –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª": 1400,
    "–°–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∫–∑–∞–ª": 1500,
}
