import os
import logging
import psycopg2
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton,InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from datetime import datetime, timedelta


import booking  # –ª–æ–≥–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç—É—Ç


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
    dbname=os.getenv("DB_NAME"),
    user=os.getenv("DB_USER"),
    password=os.getenv("DB_PASSWORD"),
    host=os.getenv("DB_HOST"),
    port=os.getenv("DB_PORT")
)
cursor = conn.cursor()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ—Ä—ë–º –∏–∑ booking.py
WAIT_PHONE = 0
CHOOSE_TYPE, CHOOSE_CITY, CHOOSE_POINT, ENTER_TIME, CONFIRM_BOOKING = booking.get_states_range()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–∑ booking.py)
main_menu = booking.main_menu


STATUS_MAP = {
    "pending": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
    "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
    "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
    "completed": "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
}


# /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    logger.info("/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", telegram_id)
    cursor.execute("SELECT * FROM users WHERE telegram_id = %s", (telegram_id,))
    user = cursor.fetchone()

    if not user:
        await update.message.reply_text(
            "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                resize_keyboard=True
            )
        )
        return WAIT_PHONE
    else:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
        return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    telegram_id = update.effective_user.id
    full_name = f"{update.effective_user.first_name or ''} {update.effective_user.last_name or ''}".strip()
    phone = contact.phone_number

    cursor.execute(
        "INSERT INTO users (telegram_id, full_name, phone) VALUES (%s, %s, %s) ON CONFLICT (telegram_id) DO NOTHING",
        (telegram_id, full_name, phone)
    )
    conn.commit()

    await update.message.reply_text("‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
    return ConversationHandler.END


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    telegram_id = update.effective_user.id
    logger.info("–ú–µ–Ω—é: '%s' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", text, telegram_id)

    if text == "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏":
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
        user_id_row = cursor.fetchone()

        if not user_id_row:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=main_menu)
            return

        user_id = user_id_row[0]
        cursor.execute("""
            SELECT pickup_point, destination_point, status, id, scheduled_time
            FROM bookings
            WHERE client_id = %s AND status != 'cancelled'
            ORDER BY scheduled_time NULLS LAST
        """, (user_id,))
        bookings = cursor.fetchall()

        if bookings:
            for i, (pickup, destination, status, booking_id, scheduled_time) in enumerate(bookings):
                time_str = scheduled_time.strftime("%Y-%m-%d %H:%M") if scheduled_time else "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                status_text = STATUS_MAP.get(status, status)

                msg = (
                    f"üìÖ *–ë—Ä–æ–Ω—å #{i+1}:*\n"
                    f"{pickup} ‚Üí {destination}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {time_str} | –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
                    "‚ùó –ï—Å–ª–∏ –¥–æ –ø–æ–µ–∑–¥–∫–∏ < 12 —á–∞—Å–æ–≤ ‚Äî –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è."
                )


                if status in ("pending", "confirmed"):
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å #{booking_id}", callback_data=f"cancel:{booking_id}")]
                    ])
                else:
                    keyboard = None

                await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=keyboard or main_menu)
        else:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.", reply_markup=main_menu)

    elif text.startswith("–û—Ç–º–µ–Ω–∏—Ç—å"):
        try:
            booking_id = int(text.split()[1])
        except (IndexError, ValueError):
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –±—Ä–æ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä: –û—Ç–º–µ–Ω–∏—Ç—å 123", reply_markup=main_menu)
            return

        cursor.execute("""
            SELECT scheduled_time, status
            FROM bookings
            WHERE id = %s AND client_id = (SELECT id FROM users WHERE telegram_id = %s)
        """, (booking_id, telegram_id))
        result = cursor.fetchone()

        if not result:
            await update.message.reply_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.", reply_markup=main_menu)
            return

        scheduled_time, status = result
        if status == "cancelled":
            await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–∞ –±—Ä–æ–Ω—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
            return

        now = datetime.now()
        if scheduled_time and (scheduled_time - now < timedelta(hours=12)):
            refund_msg = "‚ö†Ô∏è –î–æ –ø–æ–µ–∑–¥–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 12 —á–∞—Å–æ–≤ ‚Äî –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è."
        else:
            refund_msg = "‚úÖ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ."

        cursor.execute("UPDATE bookings SET status = 'cancelled' WHERE id = %s", (booking_id,))
        conn.commit()

        await update.message.reply_text(
            f"üö´ –ë—Ä–æ–Ω—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n{refund_msg}",
            reply_markup=main_menu
        )

    elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        cursor.execute("SELECT full_name, phone FROM users WHERE telegram_id = %s", (telegram_id,))
        user = cursor.fetchone()
        if user:
            await update.message.reply_text(
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {user[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {user[1]}",
                reply_markup=main_menu
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", reply_markup=main_menu)

    elif text == "üë®‚Äç‚úàÔ∏è –°—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º":
        await update.message.reply_text("üöò –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º: @admin", reply_markup=main_menu)

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å / –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: +7-999-123-4567", reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚õî –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
    return ConversationHandler.END

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è confirm_booking –∏–∑ booking.py
async def confirm_booking_wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = context.application.bot_data["conn"]
    cursor = context.application.bot_data["cursor"]
    return await booking.confirm_booking(update, context, conn, cursor)

async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    message = update.message.text
    match = re.match(r"/cancel_(\d+)", message)

    if not match:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    booking_id = int(match.group(1))

    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω—å
    cursor.execute("""
        SELECT client_id, ride_time, status FROM bookings WHERE id = %s
    """, (booking_id,))
    result = cursor.fetchone()

    if not result:
        await update.message.reply_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    client_id, ride_time, status = result

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (telegram_id,))
    user_id = cursor.fetchone()[0]

    if client_id != user_id:
        await update.message.reply_text("üö´ –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –±—Ä–æ–Ω—å.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if ride_time is not None:
        now = datetime.now()
        hours_diff = (ride_time - now).total_seconds() / 3600

        if hours_diff < 12:
            warning = "‚ùóÔ∏è –í—ã –æ—Ç–º–µ–Ω—è–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 12 —á–∞—Å–æ–≤. –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è."
        else:
            warning = "‚úÖ –ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞."

    else:
        warning = "‚ö†Ô∏è –í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –±–µ–∑ —Ä–∞—Å—á—ë—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞."

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    cursor.execute("UPDATE bookings SET status = 'cancelled' WHERE id = %s", (booking_id,))
    conn.commit()

    await update.message.reply_text(warning, reply_markup=main_menu)


async def handle_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    telegram_id = update.effective_user.id
    data = query.data

    if data.startswith("cancel:"):
        booking_id = int(data.split(":")[1])

        cursor.execute("""
            SELECT scheduled_time, status
            FROM bookings
            WHERE id = %s AND client_id = (SELECT id FROM users WHERE telegram_id = %s)
        """, (booking_id, telegram_id))
        result = cursor.fetchone()

        if not result:
            await query.edit_message_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ—ë –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.", reply_markup=main_menu)
            return

        scheduled_time, status = result
        if status == "cancelled":
            await query.edit_message_text("‚ÑπÔ∏è –≠—Ç–∞ –±—Ä–æ–Ω—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu)
            return

        now = datetime.now()
        if scheduled_time and (scheduled_time - now < timedelta(hours=12)):
            refund_msg = "‚ö†Ô∏è –î–æ –ø–æ–µ–∑–¥–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 12 —á–∞—Å–æ–≤ ‚Äî –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è."
        else:
            refund_msg = "‚úÖ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ."

        cursor.execute("UPDATE bookings SET status = 'cancelled' WHERE id = %s", (booking_id,))
        conn.commit()

        await query.edit_message_text(f"üö´ –ë—Ä–æ–Ω—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n{refund_msg}", reply_markup=main_menu)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram Taxi Bot...")

    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º conn –∏ cursor –≤ bot_data –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    app.bot_data["conn"] = conn
    app.bot_data["cursor"] = cursor

    # ConversationHandler –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç –º–µ–Ω—é "üöï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É")
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üöï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É$"), booking.choose_type)],
        states={
            WAIT_PHONE: [MessageHandler(filters.CONTACT, get_phone)],
            CHOOSE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking.choose_type)],
            CHOOSE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking.choose_city)],
            CHOOSE_POINT: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking.choose_point)],
            ENTER_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, booking.enter_time)],
            CONFIRM_BOOKING: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_booking_wrapper)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CallbackQueryHandler(handle_cancel_callback, pattern=r'^cancel:\d+$'))

    app.add_handler(MessageHandler(filters.Regex(r"^/cancel_\d+$"), cancel_booking))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)  # Conversation handler –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()
