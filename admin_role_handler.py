from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
import psycopg2

ADMIN_MENU = ReplyKeyboardMarkup(
    [
        ["üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å"],
        ["üìÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏", "üìú –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–µ–π"],
        ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
    ],
    resize_keyboard=True
)

AWAIT_ADMIN_ACTION = 99
AWAIT_BOOKING_ID = 100

async def confirm_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    cursor = context.application.bot_data["cursor"]

    cursor.execute("SELECT role FROM users WHERE telegram_id = %s", (telegram_id,))
    result = cursor.fetchone()

    if result and result[0] == "admin":
        await update.message.reply_text("üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=ADMIN_MENU)
        return AWAIT_ADMIN_ACTION
    else:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END


async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    cursor = context.application.bot_data["cursor"]

    if text == "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω—å":
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –±—Ä–æ–Ω–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")
        return AWAIT_BOOKING_ID

    elif text == "üìÇ –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏":
        cursor.execute("""
            SELECT b.id, u.full_name, u.phone, u.telegram_id, b.scheduled_time, b.status
            FROM bookings b
            JOIN users u ON b.client_id = u.id
            WHERE b.status IN ('pending', 'confirmed')
            ORDER BY b.scheduled_time DESC
        """)
        rows = cursor.fetchall()

        if not rows:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        else:
            for row in rows:
                booking_id, full_name, phone, telegram_id, scheduled_time, status = row
                message = (
                    f"üÜî –ë—Ä–æ–Ω—å #{booking_id}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {full_name}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üìÖ –í—Ä–µ–º—è: {scheduled_time}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {status}"
                )
                buttons = []
                if telegram_id:
                    buttons.append(
                        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url=f"tg://user?id={telegram_id}")]
                    )
                await update.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(buttons) if buttons else None
                )

        return AWAIT_ADMIN_ACTION

    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–µ–π":
        cursor.execute("""
            SELECT b.id, u.full_name, u.phone, u.telegram_id, b.scheduled_time, b.status
            FROM bookings b
            JOIN users u ON b.client_id = u.id
            ORDER BY b.scheduled_time DESC
            LIMIT 30
        """)
        rows = cursor.fetchall()

        if not rows:
            await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        else:
            for row in rows:
                booking_id, full_name, phone, telegram_id, scheduled_time, status = row
                message = (
                    f"üÜî –ë—Ä–æ–Ω—å #{booking_id}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {full_name}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üìÖ –í—Ä–µ–º—è: {scheduled_time}\n"
                    f"üìå –°—Ç–∞—Ç—É—Å: {status}"
                )
                buttons = []
                if telegram_id:
                    buttons.append(
                        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url=f"tg://user?id={telegram_id}")]
                    )
                await update.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup(buttons) if buttons else None
                )

        return AWAIT_ADMIN_ACTION

    elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üîô –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(
                [["üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏", "üöï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É"]],
                resize_keyboard=True
            )
        )
        return ConversationHandler.END


async def approve_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        booking_id = int(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return AWAIT_BOOKING_ID

    cursor = context.application.bot_data["cursor"]
    conn = context.application.bot_data["conn"]

    cursor.execute("SELECT status FROM bookings WHERE id = %s", (booking_id,))
    result = cursor.fetchone()

    if not result:
        await update.message.reply_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return AWAIT_BOOKING_ID

    if result[0] == "confirmed":
        await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        return AWAIT_ADMIN_ACTION

    cursor.execute("UPDATE bookings SET status = 'confirmed' WHERE id = %s", (booking_id,))
    conn.commit()

    await update.message.reply_text(f"‚úÖ –ë—Ä–æ–Ω—å #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    return AWAIT_ADMIN_ACTION
